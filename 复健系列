#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//int my_strlen(char* str)
//{
//	char* start = str;          思路：通过两个首尾指针相减所得的数字即为中间的元素个数=字符串长度。
	//char* end = str;             因为是字符串数组，所以用char类型，指针写作char*。
//while (*end != '\0')           *end = 'b', 第二次 = 'i' ,第三次't', 第四次'\0'.
//	{
		//end++;                               end++ = str++ =首元素地址++ =向右移动一个地址。
//	}
//	return end - start;
//}
//int main()
//{
//	char arr[] = "bit";         此字符串数组包括4个元素 'b' 'i' 't' '\0'
//	int len = my_strlen(arr);    通过使用my_strlen()函数求字符串长度
//	printf("%d\n",len);           打印字符串长度
//	return 0;
//}

//void Init(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)           初始化数组让所有元素全为0
//	{
//		arr[i] = 0;
//		printf("%d ", arr[i]);
//	}
//}

//void Printf(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i <= sz - 1; i++)     
//	{
//		printf("%d ", arr[i]);          按顺序打印数组所有元素
//	}
//}
//
//void reverse(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	for (left = 0; left < right;)        逆转函数让数组所有函数倒序
//	{
//		int tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tmp;
//		left++;
//		right--;
//	}
//	Printf(arr,sz);
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	/*Init(arr,sz);*/
//	reverse(arr, sz);
//	return 0;
// }

//int main()
//{
//	int arr1[] = { 1,3,5,7,9 };
//	int arr2[] = { 2,4,6,8,10 };
//	int i = 0;
//	int j = 0;
//	int sz = sizeof(arr1) / sizeof(arr1[0]);
//	for (i = 0; i <= sz - 1;i++)
//	{
//		int tmp = arr1[i];
//		arr1[i] = arr2[i];                     交换两个数组内的所有元素（数组大小一样）
//		arr2[i] = tmp;
//		printf("%d ", arr1[i]);
//	}
//	printf("\n");
//	for (j = 0; j <= sz - 1; j++)
//	{
//		printf("%d ", arr2[j]);
//	}
//	return 0;
//}
